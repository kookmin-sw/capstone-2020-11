// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_submap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/internal/legacy_submap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class LegacySubmap2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap2D>
     _instance;
} _LegacySubmap2D_default_instance_;
class LegacySubmap3DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap3D>
     _instance;
} _LegacySubmap3D_default_instance_;
class LegacySubmapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap>
     _instance;
} _LegacySubmap_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap2D, local_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap2D, num_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap2D, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap2D, probability_grid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, local_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, num_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, high_resolution_hybrid_grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap3D, low_resolution_hybrid_grid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap, submap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap, submap_2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySubmap, submap_3d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LegacySubmap2D)},
  { 9, -1, sizeof(LegacySubmap3D)},
  { 19, -1, sizeof(LegacySubmap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LegacySubmap2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LegacySubmap3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LegacySubmap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/internal/legacy_submap.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto::InitDefaults();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _LegacySubmap2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LegacySubmap2D_default_instance_);_LegacySubmap3D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LegacySubmap3D_default_instance_);_LegacySubmap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LegacySubmap_default_instance_);_LegacySubmap2D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _LegacySubmap2D_default_instance_._instance.get_mutable()->probability_grid_ = const_cast< ::cartographer::mapping::proto::LegacyProbabilityGrid*>(
      ::cartographer::mapping::proto::LegacyProbabilityGrid::internal_default_instance());
  _LegacySubmap3D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _LegacySubmap3D_default_instance_._instance.get_mutable()->high_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
  _LegacySubmap3D_default_instance_._instance.get_mutable()->low_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
  _LegacySubmap_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  _LegacySubmap_default_instance_._instance.get_mutable()->submap_2d_ = const_cast< ::cartographer::mapping::proto::LegacySubmap2D*>(
      ::cartographer::mapping::proto::LegacySubmap2D::internal_default_instance());
  _LegacySubmap_default_instance_._instance.get_mutable()->submap_3d_ = const_cast< ::cartographer::mapping::proto::LegacySubmap3D*>(
      ::cartographer::mapping::proto::LegacySubmap3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n7cartographer/mapping/proto/internal/le"
      "gacy_submap.proto\022\032cartographer.mapping."
      "proto\032+cartographer/mapping/proto/pose_g"
      "raph.proto\032Acartographer/mapping/proto/i"
      "nternal/legacy_probability_grid.proto\032/c"
      "artographer/mapping/proto/3d/hybrid_grid"
      ".proto\032,cartographer/transform/proto/tra"
      "nsform.proto\"\302\001\n\016LegacySubmap2D\0229\n\nlocal"
      "_pose\030\001 \001(\0132%.cartographer.transform.pro"
      "to.Rigid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010fi"
      "nished\030\003 \001(\010\022K\n\020probability_grid\030\004 \001(\01321"
      ".cartographer.mapping.proto.LegacyProbab"
      "ilityGrid\"\216\002\n\016LegacySubmap3D\0229\n\nlocal_po"
      "se\030\001 \001(\0132%.cartographer.transform.proto."
      "Rigid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010finis"
      "hed\030\003 \001(\010\022K\n\033high_resolution_hybrid_grid"
      "\030\004 \001(\0132&.cartographer.mapping.proto.Hybr"
      "idGrid\022J\n\032low_resolution_hybrid_grid\030\005 \001"
      "(\0132&.cartographer.mapping.proto.HybridGr"
      "id\"\305\001\n\014LegacySubmap\0227\n\tsubmap_id\030\001 \001(\0132$"
      ".cartographer.mapping.proto.SubmapId\022=\n\t"
      "submap_2d\030\002 \001(\0132*.cartographer.mapping.p"
      "roto.LegacySubmap2D\022=\n\tsubmap_3d\030\003 \001(\0132*"
      ".cartographer.mapping.proto.LegacySubmap"
      "3Db\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 970);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/internal/legacy_submap.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto::AddDescriptors();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap2D::kLocalPoseFieldNumber;
const int LegacySubmap2D::kNumRangeDataFieldNumber;
const int LegacySubmap2D::kFinishedFieldNumber;
const int LegacySubmap2D::kProbabilityGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap2D::LegacySubmap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap2D)
}
LegacySubmap2D::LegacySubmap2D(const LegacySubmap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  if (from.has_probability_grid()) {
    probability_grid_ = new ::cartographer::mapping::proto::LegacyProbabilityGrid(*from.probability_grid_);
  } else {
    probability_grid_ = NULL;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap2D)
}

void LegacySubmap2D::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
  _cached_size_ = 0;
}

LegacySubmap2D::~LegacySubmap2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap2D)
  SharedDtor();
}

void LegacySubmap2D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete probability_grid_;
}

void LegacySubmap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacySubmap2D::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LegacySubmap2D& LegacySubmap2D::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LegacySubmap2D* LegacySubmap2D::New(::google::protobuf::Arena* arena) const {
  LegacySubmap2D* n = new LegacySubmap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacySubmap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && probability_grid_ != NULL) {
    delete probability_grid_;
  }
  probability_grid_ = NULL;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool LegacySubmap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_probability_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap2D)
  return false;
#undef DO_
}

void LegacySubmap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_pose_, output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->probability_grid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap2D)
}

::google::protobuf::uint8* LegacySubmap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->local_pose_, deterministic, target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->probability_grid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap2D)
  return target;
}

size_t LegacySubmap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_pose_);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->probability_grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacySubmap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacySubmap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap2D)
    MergeFrom(*source);
  }
}

void LegacySubmap2D::MergeFrom(const LegacySubmap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_probability_grid()) {
    mutable_probability_grid()->::cartographer::mapping::proto::LegacyProbabilityGrid::MergeFrom(from.probability_grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void LegacySubmap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap2D::CopyFrom(const LegacySubmap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap2D::IsInitialized() const {
  return true;
}

void LegacySubmap2D::Swap(LegacySubmap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap2D::InternalSwap(LegacySubmap2D* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(probability_grid_, other->probability_grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacySubmap2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacySubmap2D

// .cartographer.transform.proto.Rigid3d local_pose = 1;
bool LegacySubmap2D::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != NULL;
}
void LegacySubmap2D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& LegacySubmap2D::local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* LegacySubmap2D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  return local_pose_;
}
::cartographer::transform::proto::Rigid3d* LegacySubmap2D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
void LegacySubmap2D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap2D.local_pose)
}

// int32 num_range_data = 2;
void LegacySubmap2D::clear_num_range_data() {
  num_range_data_ = 0;
}
::google::protobuf::int32 LegacySubmap2D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.num_range_data)
  return num_range_data_;
}
void LegacySubmap2D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap2D.num_range_data)
}

// bool finished = 3;
void LegacySubmap2D::clear_finished() {
  finished_ = false;
}
bool LegacySubmap2D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.finished)
  return finished_;
}
void LegacySubmap2D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap2D.finished)
}

// .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
bool LegacySubmap2D::has_probability_grid() const {
  return this != internal_default_instance() && probability_grid_ != NULL;
}
void LegacySubmap2D::clear_probability_grid() {
  if (GetArenaNoVirtual() == NULL && probability_grid_ != NULL) delete probability_grid_;
  probability_grid_ = NULL;
}
const ::cartographer::mapping::proto::LegacyProbabilityGrid& LegacySubmap2D::probability_grid() const {
  const ::cartographer::mapping::proto::LegacyProbabilityGrid* p = probability_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacyProbabilityGrid*>(
      &::cartographer::mapping::proto::_LegacyProbabilityGrid_default_instance_);
}
::cartographer::mapping::proto::LegacyProbabilityGrid* LegacySubmap2D::mutable_probability_grid() {
  
  if (probability_grid_ == NULL) {
    probability_grid_ = new ::cartographer::mapping::proto::LegacyProbabilityGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  return probability_grid_;
}
::cartographer::mapping::proto::LegacyProbabilityGrid* LegacySubmap2D::release_probability_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  
  ::cartographer::mapping::proto::LegacyProbabilityGrid* temp = probability_grid_;
  probability_grid_ = NULL;
  return temp;
}
void LegacySubmap2D::set_allocated_probability_grid(::cartographer::mapping::proto::LegacyProbabilityGrid* probability_grid) {
  delete probability_grid_;
  probability_grid_ = probability_grid;
  if (probability_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap3D::kLocalPoseFieldNumber;
const int LegacySubmap3D::kNumRangeDataFieldNumber;
const int LegacySubmap3D::kFinishedFieldNumber;
const int LegacySubmap3D::kHighResolutionHybridGridFieldNumber;
const int LegacySubmap3D::kLowResolutionHybridGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap3D::LegacySubmap3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap3D)
}
LegacySubmap3D::LegacySubmap3D(const LegacySubmap3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  if (from.has_high_resolution_hybrid_grid()) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.high_resolution_hybrid_grid_);
  } else {
    high_resolution_hybrid_grid_ = NULL;
  }
  if (from.has_low_resolution_hybrid_grid()) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.low_resolution_hybrid_grid_);
  } else {
    low_resolution_hybrid_grid_ = NULL;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap3D)
}

void LegacySubmap3D::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
  _cached_size_ = 0;
}

LegacySubmap3D::~LegacySubmap3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap3D)
  SharedDtor();
}

void LegacySubmap3D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete high_resolution_hybrid_grid_;
  if (this != internal_default_instance()) delete low_resolution_hybrid_grid_;
}

void LegacySubmap3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacySubmap3D::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LegacySubmap3D& LegacySubmap3D::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LegacySubmap3D* LegacySubmap3D::New(::google::protobuf::Arena* arena) const {
  LegacySubmap3D* n = new LegacySubmap3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacySubmap3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) {
    delete high_resolution_hybrid_grid_;
  }
  high_resolution_hybrid_grid_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) {
    delete low_resolution_hybrid_grid_;
  }
  low_resolution_hybrid_grid_ = NULL;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool LegacySubmap3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap3D)
  return false;
#undef DO_
}

void LegacySubmap3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_pose_, output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->high_resolution_hybrid_grid_, output);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->low_resolution_hybrid_grid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap3D)
}

::google::protobuf::uint8* LegacySubmap3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->local_pose_, deterministic, target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->high_resolution_hybrid_grid_, deterministic, target);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->low_resolution_hybrid_grid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap3D)
  return target;
}

size_t LegacySubmap3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap3D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_pose_);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_resolution_hybrid_grid_);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->low_resolution_hybrid_grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacySubmap3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap3D)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacySubmap3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap3D)
    MergeFrom(*source);
  }
}

void LegacySubmap3D::MergeFrom(const LegacySubmap3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_high_resolution_hybrid_grid()) {
    mutable_high_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.high_resolution_hybrid_grid());
  }
  if (from.has_low_resolution_hybrid_grid()) {
    mutable_low_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.low_resolution_hybrid_grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void LegacySubmap3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap3D::CopyFrom(const LegacySubmap3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap3D::IsInitialized() const {
  return true;
}

void LegacySubmap3D::Swap(LegacySubmap3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap3D::InternalSwap(LegacySubmap3D* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(high_resolution_hybrid_grid_, other->high_resolution_hybrid_grid_);
  swap(low_resolution_hybrid_grid_, other->low_resolution_hybrid_grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacySubmap3D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacySubmap3D

// .cartographer.transform.proto.Rigid3d local_pose = 1;
bool LegacySubmap3D::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != NULL;
}
void LegacySubmap3D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& LegacySubmap3D::local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* LegacySubmap3D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  return local_pose_;
}
::cartographer::transform::proto::Rigid3d* LegacySubmap3D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
void LegacySubmap3D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.local_pose)
}

// int32 num_range_data = 2;
void LegacySubmap3D::clear_num_range_data() {
  num_range_data_ = 0;
}
::google::protobuf::int32 LegacySubmap3D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.num_range_data)
  return num_range_data_;
}
void LegacySubmap3D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap3D.num_range_data)
}

// bool finished = 3;
void LegacySubmap3D::clear_finished() {
  finished_ = false;
}
bool LegacySubmap3D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.finished)
  return finished_;
}
void LegacySubmap3D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap3D.finished)
}

// .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
bool LegacySubmap3D::has_high_resolution_hybrid_grid() const {
  return this != internal_default_instance() && high_resolution_hybrid_grid_ != NULL;
}
void LegacySubmap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
}
const ::cartographer::mapping::proto::HybridGrid& LegacySubmap3D::high_resolution_hybrid_grid() const {
  const ::cartographer::mapping::proto::HybridGrid* p = high_resolution_hybrid_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::HybridGrid*>(
      &::cartographer::mapping::proto::_HybridGrid_default_instance_);
}
::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::mutable_high_resolution_hybrid_grid() {
  
  if (high_resolution_hybrid_grid_ == NULL) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  return high_resolution_hybrid_grid_;
}
::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::release_high_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
  return temp;
}
void LegacySubmap3D::set_allocated_high_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid) {
  delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = high_resolution_hybrid_grid;
  if (high_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
}

// .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
bool LegacySubmap3D::has_low_resolution_hybrid_grid() const {
  return this != internal_default_instance() && low_resolution_hybrid_grid_ != NULL;
}
void LegacySubmap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
}
const ::cartographer::mapping::proto::HybridGrid& LegacySubmap3D::low_resolution_hybrid_grid() const {
  const ::cartographer::mapping::proto::HybridGrid* p = low_resolution_hybrid_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::HybridGrid*>(
      &::cartographer::mapping::proto::_HybridGrid_default_instance_);
}
::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::mutable_low_resolution_hybrid_grid() {
  
  if (low_resolution_hybrid_grid_ == NULL) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  return low_resolution_hybrid_grid_;
}
::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::release_low_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
  return temp;
}
void LegacySubmap3D::set_allocated_low_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid) {
  delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = low_resolution_hybrid_grid;
  if (low_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap::kSubmapIdFieldNumber;
const int LegacySubmap::kSubmap2DFieldNumber;
const int LegacySubmap::kSubmap3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap::LegacySubmap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap)
}
LegacySubmap::LegacySubmap(const LegacySubmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  if (from.has_submap_2d()) {
    submap_2d_ = new ::cartographer::mapping::proto::LegacySubmap2D(*from.submap_2d_);
  } else {
    submap_2d_ = NULL;
  }
  if (from.has_submap_3d()) {
    submap_3d_ = new ::cartographer::mapping::proto::LegacySubmap3D(*from.submap_3d_);
  } else {
    submap_3d_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap)
}

void LegacySubmap::SharedCtor() {
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_3d_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_3d_));
  _cached_size_ = 0;
}

LegacySubmap::~LegacySubmap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap)
  SharedDtor();
}

void LegacySubmap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete submap_2d_;
  if (this != internal_default_instance()) delete submap_3d_;
}

void LegacySubmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacySubmap::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LegacySubmap& LegacySubmap::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LegacySubmap* LegacySubmap::New(::google::protobuf::Arena* arena) const {
  LegacySubmap* n = new LegacySubmap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacySubmap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) {
    delete submap_2d_;
  }
  submap_2d_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) {
    delete submap_3d_;
  }
  submap_3d_ = NULL;
  _internal_metadata_.Clear();
}

bool LegacySubmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap)
  return false;
#undef DO_
}

void LegacySubmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_id_, output);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->submap_2d_, output);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->submap_3d_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap)
}

::google::protobuf::uint8* LegacySubmap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_id_, deterministic, target);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->submap_2d_, deterministic, target);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->submap_3d_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap)
  return target;
}

size_t LegacySubmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_id_);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_2d_);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_3d_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacySubmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacySubmap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap)
    MergeFrom(*source);
  }
}

void LegacySubmap::MergeFrom(const LegacySubmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_submap_2d()) {
    mutable_submap_2d()->::cartographer::mapping::proto::LegacySubmap2D::MergeFrom(from.submap_2d());
  }
  if (from.has_submap_3d()) {
    mutable_submap_3d()->::cartographer::mapping::proto::LegacySubmap3D::MergeFrom(from.submap_3d());
  }
}

void LegacySubmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap::CopyFrom(const LegacySubmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap::IsInitialized() const {
  return true;
}

void LegacySubmap::Swap(LegacySubmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap::InternalSwap(LegacySubmap* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  swap(submap_2d_, other->submap_2d_);
  swap(submap_3d_, other->submap_3d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacySubmap::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacySubmap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
bool LegacySubmap::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
void LegacySubmap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
const ::cartographer::mapping::proto::SubmapId& LegacySubmap::submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapId*>(
      &::cartographer::mapping::proto::_SubmapId_default_instance_);
}
::cartographer::mapping::proto::SubmapId* LegacySubmap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_id)
  return submap_id_;
}
::cartographer::mapping::proto::SubmapId* LegacySubmap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
void LegacySubmap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_id)
}

// .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
bool LegacySubmap::has_submap_2d() const {
  return this != internal_default_instance() && submap_2d_ != NULL;
}
void LegacySubmap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
const ::cartographer::mapping::proto::LegacySubmap2D& LegacySubmap::submap_2d() const {
  const ::cartographer::mapping::proto::LegacySubmap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacySubmap2D*>(
      &::cartographer::mapping::proto::_LegacySubmap2D_default_instance_);
}
::cartographer::mapping::proto::LegacySubmap2D* LegacySubmap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::LegacySubmap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_2d)
  return submap_2d_;
}
::cartographer::mapping::proto::LegacySubmap2D* LegacySubmap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_2d)
  
  ::cartographer::mapping::proto::LegacySubmap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
void LegacySubmap::set_allocated_submap_2d(::cartographer::mapping::proto::LegacySubmap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_2d)
}

// .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
bool LegacySubmap::has_submap_3d() const {
  return this != internal_default_instance() && submap_3d_ != NULL;
}
void LegacySubmap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
const ::cartographer::mapping::proto::LegacySubmap3D& LegacySubmap::submap_3d() const {
  const ::cartographer::mapping::proto::LegacySubmap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacySubmap3D*>(
      &::cartographer::mapping::proto::_LegacySubmap3D_default_instance_);
}
::cartographer::mapping::proto::LegacySubmap3D* LegacySubmap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::LegacySubmap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_3d)
  return submap_3d_;
}
::cartographer::mapping::proto::LegacySubmap3D* LegacySubmap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_3d)
  
  ::cartographer::mapping::proto::LegacySubmap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
void LegacySubmap::set_allocated_submap_3d(::cartographer::mapping::proto::LegacySubmap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
