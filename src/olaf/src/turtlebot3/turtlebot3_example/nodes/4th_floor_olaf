#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist, Point, Quaternion
import tf
from math import radians, copysign, sqrt, pow, pi, atan2
from tf.transformations import euler_from_quaternion
import numpy as np
import signal
import sys
from std_msgs.msg import Int32MultiArray
from std_msgs.msg import Float32MultiArray
from path_list import Path_Node

MAX_LIN_VEL = 0
CUR_LIN_VEL = 0
BURGER_MAX_ANG_VEL = 1.5
ANG_VEL_STEP_SIZE = 0.1

last_target_angle = 0

LAST_TARGET_POINT_X = 0
LAST_TARGET_POINT_Y = 0

g_lane_location = 0 

FRONT_DIST = 0.0
RIGHT_DIST = 0.0
LEFT_DIST = 0.0

class GotoPoint():
    def __init__(self, path_list):
        global LAST_TARGET_POINT_X
        global LAST_TARGET_POINT_Y
        global g_lane_location
        rospy.init_node('olaf_pointop', anonymous=False)
        rospy.on_shutdown(self.shutdown)
        self.cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size=5)

        position = Point()
        move_cmd = Twist()
        
        x_location = Point()

        self.lane_location = 0
        self.rate = rospy.Rate(10)
        self.tf_listener = tf.TransformListener()
        self.odom_frame = 'odom'
        self.lane_location_sub = rospy.Subscriber("lane_data",Int32MultiArray,self.callback)
        
        self.lidar_distance = rospy.Subscriber("from_lidar_to_avoid", Float32MultiArray, self.lidar_callback)
        
        self.TF_LISTEN()
        
        (goal_x, goal_y, goal_z) = (path_list[0], path_list[1], path_list[2])
        
        goal_flag = path_list[3]
        
        self.rotate_before_move(goal_x, goal_y, path_list[2])
        self.move(goal_x, goal_y, goal_flag)
        
        LAST_TARGET_POINT_X = goal_x
        LAST_TARGET_POINT_Y = goal_y
        
    def callback(self,msg):
        global g_lane_location
        g_lane_location = msg.data[0]
        
    def lidar_callback(self, msg):
        global FRONT_DIST, RIGHT_DIST, LEFT_DIST
        FRONT_DIST, RIGHT_DIST, LEFT_DIST = msg.data
        #print(FRONT_DIST, RIGHT_DIST, LEFT_DIST)
        #print(msg.data)
         
    
    def rotate_before_move(self, target_x, target_y, target_z):
        global last_target_angle, FRONT_DIST, RIGHT_DIST, LEFT_DIST
        
        
        #print("front_dist : ", FRONT_DIST)
        #print("right_dist : ", RIGHT_DIST)
        #print("left_dist : ", LEFT_DIST)
        
        (position, rotation) = self.get_odom()
        (x_diff, y_diff) = (target_x - position.x, target_y - position.y)

        turn_cmd = Twist()
        turn_cmd.linear.x = 0.0

        (x_diff, y_diff) = (int(x_diff), int(y_diff))

        target_angle = 0.0

        #if x_diff > 0:
        #    xy_flag = 0
        #    pass

        #elif x_diff < 0:
        #    if last_target_angle < 0:
        #        target_angle = -180
        #    else:
        #        target_angle = 180

        #elif y_diff > 0:
        #    target_angle = 90

        #elif y_diff < 0:
        #    target_angle = -90

        #else:
        #    print("Wrong path operation.")
        #    self.shutdown()
        target_angle = target_z    
        last_target_angle = target_angle

        target_angle = np.deg2rad(target_angle)
        print("x_diff :" + str(x_diff))
        print("y_diff :" + str(y_diff))
        print("target_angle :" + str(target_angle))

        while abs(rotation - target_angle) > 0.05:

            (position, rotation) = self.get_odom()
            if target_angle > 0:
                if rotation <= target_angle and rotation >= target_angle - pi:
                    turn_cmd.angular.z = 0.5
                else:
                    turn_cmd.angular.z = -0.5
            else:
                if rotation <= target_angle + pi and rotation > target_angle:
                    turn_cmd.angular.z = -0.5
                else:
                    turn_cmd.angular.z = 0.5

            self.cmd_vel.publish(turn_cmd)
            self.rate.sleep()
        
        rospy.loginfo("Stopping the robot...")

    def move(self, target_x, target_y, returned_flag):
        global MAX_LIN_VEL
        global LAST_TARGET_POINT_X
        global LAST_TARGET_POINT_Y
        global g_lane_location
        global FRONT_DIST, LEFT_DIST, RIGHT_DIST
        
        lane_location = g_lane_location
        move_cmd = Twist()
        (position, rotation) = self.get_odom()
        last_rotation = 0.0
        
        right_target_distance = 0.8
        left_target_distance = 2.5
        
        my_position_x = LAST_TARGET_POINT_X
        my_position_y = LAST_TARGET_POINT_Y
        
        print("position : ", position)
        
        
        #print("target_x : ", target_x)
        #print("target_y : ", target_y)
        #distance = sqrt(pow(target_x - position.x, 2) + pow(target_y - position.y, 2))
        
        #if target_x != LAST_TARGET_POINT_X:
        #    distance = sqrt(pow(target_x - position.x,2))
        #elif target_y != LAST_TARGET_POINT_Y:
        #    distance = sqrt(pow(target_y - position.y,2))
        #else:
        #    distance = 0
        
        if target_x != LAST_TARGET_POINT_X:
            distance = sqrt(pow(target_x - my_position_x,2))
        elif target_y != LAST_TARGET_POINT_Y:
            distance = sqrt(pow(target_y - my_position_y,2))
        else:
            distance = 0

        while distance > 0.05:
            (position, rotation) = self.get_odom()
            
            # CURRENT POSITION X,Y
            x_start = position.x
            y_start = position.y
            
            print("front_dist : ", FRONT_DIST)
            print("right_dist : ", RIGHT_DIST)
            print("left_dist : ", LEFT_DIST)
            
            if target_x != LAST_TARGET_POINT_X:
                x_start = position.x
                y_start = LAST_TARGET_POINT_Y
            elif target_y != LAST_TARGET_POINT_Y:
                x_start = LAST_TARGET_POINT_X
                y_start = position.y
            else:
                x_start = LAST_TARGET_POINT_X
                y_start = LAST_TARGET_POINT_Y
            	
            # CURRENT POSITION -> TARGET POINT YAW VECTOR
            path_angle = atan2(target_y - y_start, target_x - x_start)
            
            # 
            lane_diff = (330.0 - float(g_lane_location))
            
            print("lane_location : ", g_lane_location)
            print("lane_diff : ", lane_diff)
            
            if path_angle > pi-0.1 and rotation <= 0:
                rotation = 2*pi + rotation
            elif path_angle < -pi+0.1 and rotation > 0:
                rotation = -2*pi + rotation
                
            print("last_rotation: " + str(last_rotation))
            error_x = target_x - position.x
            error_y = target_y - position.y
            
            #if abs(error_y) < 0.2:
            #    move_cmd.angular.z = 0
            #    print("No error")
            #else:
            #    move_cmd.angular.z = path_angle - rotation
            #    print("Error Detected")
            #move_cmd.angular.z = path_angle - rotation
            
            move_cmd.angular.z = 0
            
            if RIGHT_DIST < 0.7 and RIGHT_DIST > 0.3 and LEFT_DIST > 2.6 and LEFT_DIST < 3.2:
                move_cmd.angular.z = (right_target_distance - RIGHT_DIST)*0.05
                print("---------Right Wall Collision---------")
            elif RIGHT_DIST > 0.9 and RIGHT_DIST < 1.3 and LEFT_DIST < 2.4 and LEFT_DIST > 2.0:
                print("---------Left Wall Collision---------")
                move_cmd.angular.z = (right_target_distance - RIGHT_DIST)*0.05
            else:
                pass 
            
            
            '''
            if returned_flag == 2 and distance < 2:
                move_cmd.angular.z = path_angle - rotation
                print("&&&&&&&&&&&odom_control&&&&&&&&&&&&&&&&&&")
            elif abs(lane_diff) <= 30:
                move_cmd.angular.z = path_angle - rotation
                print("&&&&&&&&&&&odom_control&&&&&&&&&&&&&&&&&&")
            elif abs(lane_diff) > 30 and abs(lane_diff) < 80:
                move_cmd.angular.z = lane_diff/33000
                if MAX_LIN_VEL > 0.25:
                    MAX_LIN_VEL -= 0.005
                print("***********lane_contorl111111111________________")
            elif abs(lane_diff) >= 80:
                if MAX_LIN_VEL > 0.25:
                    MAX_LIN_VEL -= 0.05
                move_cmd.angular.z = lane_diff/3300*5
                print("***********lane_contorl2222222________________")
            '''
            #else :
            #    move_cmd.angular.z = path_angle - rotation
            #    print("&&&&&&&&&&&odom_control&&&&&&&&&&&&&&&&&&")
            
            #if distance < 0.7:
            #    move_cmd.angular.z = path_angle - rotation
            #    print("******************** 1m *********************")
            
            if target_x != LAST_TARGET_POINT_X:
                distance = sqrt(pow(target_x - x_start,2))
            elif target_y != LAST_TARGET_POINT_Y:
                distance = sqrt(pow(target_y - y_start,2))
            else:
                distance = 0
            #distance = sqrt(pow(target_x - position.x, 2) + pow(target_y - position.y, 2))
            if MAX_LIN_VEL < 0.18:
                MAX_LIN_VEL+=0.001
            move_cmd.linear.x = min(distance, MAX_LIN_VEL)
            print("distance : ", distance)
            print("position x : ",position.x)
            print("position y : ",position.y)
            
            print("target_x : ", target_x)
            print("target_y : ", target_y)
            
            #if move_cmd.angular.z > 0:
                #move_cmd.angular.z = min(move_cmd.angular.z, 0)
                #move_cmd.angular.z = min(move_cmd.angular.z, 1.5)
            #elif move_cmd.angular.z < 0:
                #move_cmd.angular.z = max(move_cmd.angular.z, 0)
                #move_cmd.angular.z = max(move_cmd.angular.z, -1.5)
            
            print("move_cmd.angular.z : ", move_cmd.angular.z)
            #print("path_angle: " + str(path_angle))
            #print("diff : ", abs(path_angle - rotation))

            last_rotation = rotation
            self.cmd_vel.publish(move_cmd)
            self.rate.sleep()
        MAX_LIN_VEL = 0

    def TF_LISTEN(self):
        try:
            self.tf_listener.waitForTransform(self.odom_frame, 'base_footprint', rospy.Time(), rospy.Duration(1.0))
            self.base_frame = 'base_footprint'
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            try:
                self.tf_listener.waitForTransform(self.odom_frame, 'base_link', rospy.Time(), rospy.Duration(1.0))
                self.base_frame = 'base_link'
            except (tf.Exception, tf.ConnectivityException, tf.LookupException):
                rospy.loginfo("Cannot find transform between odom and base_link or base_footprint")
                rospy.signal_shutdown("tf Exception")

    def get_odom(self):
        try:
            (trans, rot) = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))
            rotation = euler_from_quaternion(rot)

        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return

        return (Point(*trans), rotation[2])
        

    def shutdown(self):
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)

def handler(signum, f):
    print signum
    sys.exit()

if __name__ == '__main__':
    
    path_node = Path_Node()
    
    path_list = path_node.get_path_list("door")
 
    print("++++++++++++")
    print("path_lists")
    for p in path_list:
        print(p)
    print("++++++++++++")
    
    count = 0

    signal.signal(signal.SIGINT, handler)

    while not rospy.is_shutdown():
    
        GotoPoint(path_list[count])
        count += 1
        if count > len(path_list):
            break
