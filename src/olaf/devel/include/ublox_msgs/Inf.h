// Generated by gencpp from file ublox_msgs/Inf.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_INF_H
#define UBLOX_MSGS_MESSAGE_INF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct Inf_
{
  typedef Inf_<ContainerAllocator> Type;

  Inf_()
    : str()  {
    }
  Inf_(const ContainerAllocator& _alloc)
    : str(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _str_type;
  _str_type str;



  enum {
    CLASS_ID = 4u,
  };


  typedef boost::shared_ptr< ::ublox_msgs::Inf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::Inf_<ContainerAllocator> const> ConstPtr;

}; // struct Inf_

typedef ::ublox_msgs::Inf_<std::allocator<void> > Inf;

typedef boost::shared_ptr< ::ublox_msgs::Inf > InfPtr;
typedef boost::shared_ptr< ::ublox_msgs::Inf const> InfConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::Inf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::Inf_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ublox_msgs': ['/home/nvidia/olaf/src/ublox/ublox_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::Inf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::Inf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::Inf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::Inf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::Inf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::Inf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1c433234e5eccc57045e40aca48eb6e";
  }

  static const char* value(const ::ublox_msgs::Inf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1c433234e5eccc5ULL;
  static const uint64_t static_value2 = 0x7045e40aca48eb6eULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/Inf";
  }

  static const char* value(const ::ublox_msgs::Inf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::Inf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# UBX-INF (0x04, 0x00...0x04)\n\
# ASCII output\n\
#\n\
# This message has a variable length payload, representing an ASCII string.\n\
#\n\
\n\
uint8 CLASS_ID = 4\n\
\n\
char[] str\n\
";
  }

  static const char* value(const ::ublox_msgs::Inf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::Inf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.str);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Inf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::Inf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::Inf_<ContainerAllocator>& v)
  {
    s << indent << "str[]" << std::endl;
    for (size_t i = 0; i < v.str.size(); ++i)
    {
      s << indent << "  str[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.str[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_INF_H
