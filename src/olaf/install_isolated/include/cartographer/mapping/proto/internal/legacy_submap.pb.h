// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_submap.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph.pb.h"
#include "cartographer/mapping/proto/internal/legacy_probability_grid.pb.h"
#include "cartographer/mapping/proto/3d/hybrid_grid.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class LegacySubmap;
class LegacySubmapDefaultTypeInternal;
extern LegacySubmapDefaultTypeInternal _LegacySubmap_default_instance_;
class LegacySubmap2D;
class LegacySubmap2DDefaultTypeInternal;
extern LegacySubmap2DDefaultTypeInternal _LegacySubmap2D_default_instance_;
class LegacySubmap3D;
class LegacySubmap3DDefaultTypeInternal;
extern LegacySubmap3DDefaultTypeInternal _LegacySubmap3D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto

// ===================================================================

class LegacySubmap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacySubmap2D) */ {
 public:
  LegacySubmap2D();
  virtual ~LegacySubmap2D();

  LegacySubmap2D(const LegacySubmap2D& from);

  inline LegacySubmap2D& operator=(const LegacySubmap2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacySubmap2D(LegacySubmap2D&& from) noexcept
    : LegacySubmap2D() {
    *this = ::std::move(from);
  }

  inline LegacySubmap2D& operator=(LegacySubmap2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacySubmap2D& default_instance();

  static inline const LegacySubmap2D* internal_default_instance() {
    return reinterpret_cast<const LegacySubmap2D*>(
               &_LegacySubmap2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LegacySubmap2D* other);
  friend void swap(LegacySubmap2D& a, LegacySubmap2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacySubmap2D* New() const PROTOBUF_FINAL { return New(NULL); }

  LegacySubmap2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegacySubmap2D& from);
  void MergeFrom(const LegacySubmap2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegacySubmap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  bool has_probability_grid() const;
  void clear_probability_grid();
  static const int kProbabilityGridFieldNumber = 4;
  const ::cartographer::mapping::proto::LegacyProbabilityGrid& probability_grid() const;
  ::cartographer::mapping::proto::LegacyProbabilityGrid* mutable_probability_grid();
  ::cartographer::mapping::proto::LegacyProbabilityGrid* release_probability_grid();
  void set_allocated_probability_grid(::cartographer::mapping::proto::LegacyProbabilityGrid* probability_grid);

  // int32 num_range_data = 2;
  void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  ::google::protobuf::int32 num_range_data() const;
  void set_num_range_data(::google::protobuf::int32 value);

  // bool finished = 3;
  void clear_finished();
  static const int kFinishedFieldNumber = 3;
  bool finished() const;
  void set_finished(bool value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacySubmap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::cartographer::mapping::proto::LegacyProbabilityGrid* probability_grid_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LegacySubmap3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacySubmap3D) */ {
 public:
  LegacySubmap3D();
  virtual ~LegacySubmap3D();

  LegacySubmap3D(const LegacySubmap3D& from);

  inline LegacySubmap3D& operator=(const LegacySubmap3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacySubmap3D(LegacySubmap3D&& from) noexcept
    : LegacySubmap3D() {
    *this = ::std::move(from);
  }

  inline LegacySubmap3D& operator=(LegacySubmap3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacySubmap3D& default_instance();

  static inline const LegacySubmap3D* internal_default_instance() {
    return reinterpret_cast<const LegacySubmap3D*>(
               &_LegacySubmap3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LegacySubmap3D* other);
  friend void swap(LegacySubmap3D& a, LegacySubmap3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacySubmap3D* New() const PROTOBUF_FINAL { return New(NULL); }

  LegacySubmap3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegacySubmap3D& from);
  void MergeFrom(const LegacySubmap3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegacySubmap3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  bool has_high_resolution_hybrid_grid() const;
  void clear_high_resolution_hybrid_grid();
  static const int kHighResolutionHybridGridFieldNumber = 4;
  const ::cartographer::mapping::proto::HybridGrid& high_resolution_hybrid_grid() const;
  ::cartographer::mapping::proto::HybridGrid* mutable_high_resolution_hybrid_grid();
  ::cartographer::mapping::proto::HybridGrid* release_high_resolution_hybrid_grid();
  void set_allocated_high_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid);

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  bool has_low_resolution_hybrid_grid() const;
  void clear_low_resolution_hybrid_grid();
  static const int kLowResolutionHybridGridFieldNumber = 5;
  const ::cartographer::mapping::proto::HybridGrid& low_resolution_hybrid_grid() const;
  ::cartographer::mapping::proto::HybridGrid* mutable_low_resolution_hybrid_grid();
  ::cartographer::mapping::proto::HybridGrid* release_low_resolution_hybrid_grid();
  void set_allocated_low_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid);

  // int32 num_range_data = 2;
  void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  ::google::protobuf::int32 num_range_data() const;
  void set_num_range_data(::google::protobuf::int32 value);

  // bool finished = 3;
  void clear_finished();
  static const int kFinishedFieldNumber = 3;
  bool finished() const;
  void set_finished(bool value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacySubmap3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid_;
  ::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LegacySubmap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacySubmap) */ {
 public:
  LegacySubmap();
  virtual ~LegacySubmap();

  LegacySubmap(const LegacySubmap& from);

  inline LegacySubmap& operator=(const LegacySubmap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacySubmap(LegacySubmap&& from) noexcept
    : LegacySubmap() {
    *this = ::std::move(from);
  }

  inline LegacySubmap& operator=(LegacySubmap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacySubmap& default_instance();

  static inline const LegacySubmap* internal_default_instance() {
    return reinterpret_cast<const LegacySubmap*>(
               &_LegacySubmap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LegacySubmap* other);
  friend void swap(LegacySubmap& a, LegacySubmap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacySubmap* New() const PROTOBUF_FINAL { return New(NULL); }

  LegacySubmap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegacySubmap& from);
  void MergeFrom(const LegacySubmap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegacySubmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  void clear_submap_id();
  static const int kSubmapIdFieldNumber = 1;
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  ::cartographer::mapping::proto::SubmapId* release_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  bool has_submap_2d() const;
  void clear_submap_2d();
  static const int kSubmap2DFieldNumber = 2;
  const ::cartographer::mapping::proto::LegacySubmap2D& submap_2d() const;
  ::cartographer::mapping::proto::LegacySubmap2D* mutable_submap_2d();
  ::cartographer::mapping::proto::LegacySubmap2D* release_submap_2d();
  void set_allocated_submap_2d(::cartographer::mapping::proto::LegacySubmap2D* submap_2d);

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  bool has_submap_3d() const;
  void clear_submap_3d();
  static const int kSubmap3DFieldNumber = 3;
  const ::cartographer::mapping::proto::LegacySubmap3D& submap_3d() const;
  ::cartographer::mapping::proto::LegacySubmap3D* mutable_submap_3d();
  ::cartographer::mapping::proto::LegacySubmap3D* release_submap_3d();
  void set_allocated_submap_3d(::cartographer::mapping::proto::LegacySubmap3D* submap_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacySubmap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::SubmapId* submap_id_;
  ::cartographer::mapping::proto::LegacySubmap2D* submap_2d_;
  ::cartographer::mapping::proto::LegacySubmap3D* submap_3d_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LegacySubmap2D

// .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool LegacySubmap2D::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != NULL;
}
inline void LegacySubmap2D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& LegacySubmap2D::local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* LegacySubmap2D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* LegacySubmap2D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap2D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void LegacySubmap2D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap2D.local_pose)
}

// int32 num_range_data = 2;
inline void LegacySubmap2D::clear_num_range_data() {
  num_range_data_ = 0;
}
inline ::google::protobuf::int32 LegacySubmap2D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.num_range_data)
  return num_range_data_;
}
inline void LegacySubmap2D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap2D.num_range_data)
}

// bool finished = 3;
inline void LegacySubmap2D::clear_finished() {
  finished_ = false;
}
inline bool LegacySubmap2D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.finished)
  return finished_;
}
inline void LegacySubmap2D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap2D.finished)
}

// .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
inline bool LegacySubmap2D::has_probability_grid() const {
  return this != internal_default_instance() && probability_grid_ != NULL;
}
inline void LegacySubmap2D::clear_probability_grid() {
  if (GetArenaNoVirtual() == NULL && probability_grid_ != NULL) delete probability_grid_;
  probability_grid_ = NULL;
}
inline const ::cartographer::mapping::proto::LegacyProbabilityGrid& LegacySubmap2D::probability_grid() const {
  const ::cartographer::mapping::proto::LegacyProbabilityGrid* p = probability_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacyProbabilityGrid*>(
      &::cartographer::mapping::proto::_LegacyProbabilityGrid_default_instance_);
}
inline ::cartographer::mapping::proto::LegacyProbabilityGrid* LegacySubmap2D::mutable_probability_grid() {
  
  if (probability_grid_ == NULL) {
    probability_grid_ = new ::cartographer::mapping::proto::LegacyProbabilityGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  return probability_grid_;
}
inline ::cartographer::mapping::proto::LegacyProbabilityGrid* LegacySubmap2D::release_probability_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
  
  ::cartographer::mapping::proto::LegacyProbabilityGrid* temp = probability_grid_;
  probability_grid_ = NULL;
  return temp;
}
inline void LegacySubmap2D::set_allocated_probability_grid(::cartographer::mapping::proto::LegacyProbabilityGrid* probability_grid) {
  delete probability_grid_;
  probability_grid_ = probability_grid;
  if (probability_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap2D.probability_grid)
}

// -------------------------------------------------------------------

// LegacySubmap3D

// .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool LegacySubmap3D::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != NULL;
}
inline void LegacySubmap3D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& LegacySubmap3D::local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* LegacySubmap3D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* LegacySubmap3D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void LegacySubmap3D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.local_pose)
}

// int32 num_range_data = 2;
inline void LegacySubmap3D::clear_num_range_data() {
  num_range_data_ = 0;
}
inline ::google::protobuf::int32 LegacySubmap3D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.num_range_data)
  return num_range_data_;
}
inline void LegacySubmap3D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap3D.num_range_data)
}

// bool finished = 3;
inline void LegacySubmap3D::clear_finished() {
  finished_ = false;
}
inline bool LegacySubmap3D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.finished)
  return finished_;
}
inline void LegacySubmap3D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacySubmap3D.finished)
}

// .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
inline bool LegacySubmap3D::has_high_resolution_hybrid_grid() const {
  return this != internal_default_instance() && high_resolution_hybrid_grid_ != NULL;
}
inline void LegacySubmap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
}
inline const ::cartographer::mapping::proto::HybridGrid& LegacySubmap3D::high_resolution_hybrid_grid() const {
  const ::cartographer::mapping::proto::HybridGrid* p = high_resolution_hybrid_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::HybridGrid*>(
      &::cartographer::mapping::proto::_HybridGrid_default_instance_);
}
inline ::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::mutable_high_resolution_hybrid_grid() {
  
  if (high_resolution_hybrid_grid_ == NULL) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  return high_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::release_high_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void LegacySubmap3D::set_allocated_high_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid) {
  delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = high_resolution_hybrid_grid;
  if (high_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.high_resolution_hybrid_grid)
}

// .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
inline bool LegacySubmap3D::has_low_resolution_hybrid_grid() const {
  return this != internal_default_instance() && low_resolution_hybrid_grid_ != NULL;
}
inline void LegacySubmap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
}
inline const ::cartographer::mapping::proto::HybridGrid& LegacySubmap3D::low_resolution_hybrid_grid() const {
  const ::cartographer::mapping::proto::HybridGrid* p = low_resolution_hybrid_grid_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::HybridGrid*>(
      &::cartographer::mapping::proto::_HybridGrid_default_instance_);
}
inline ::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::mutable_low_resolution_hybrid_grid() {
  
  if (low_resolution_hybrid_grid_ == NULL) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  return low_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* LegacySubmap3D::release_low_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void LegacySubmap3D::set_allocated_low_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid) {
  delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = low_resolution_hybrid_grid;
  if (low_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap3D.low_resolution_hybrid_grid)
}

// -------------------------------------------------------------------

// LegacySubmap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool LegacySubmap::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
inline void LegacySubmap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
inline const ::cartographer::mapping::proto::SubmapId& LegacySubmap::submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapId*>(
      &::cartographer::mapping::proto::_SubmapId_default_instance_);
}
inline ::cartographer::mapping::proto::SubmapId* LegacySubmap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_id)
  return submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* LegacySubmap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
inline void LegacySubmap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_id)
}

// .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
inline bool LegacySubmap::has_submap_2d() const {
  return this != internal_default_instance() && submap_2d_ != NULL;
}
inline void LegacySubmap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
inline const ::cartographer::mapping::proto::LegacySubmap2D& LegacySubmap::submap_2d() const {
  const ::cartographer::mapping::proto::LegacySubmap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacySubmap2D*>(
      &::cartographer::mapping::proto::_LegacySubmap2D_default_instance_);
}
inline ::cartographer::mapping::proto::LegacySubmap2D* LegacySubmap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::LegacySubmap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_2d)
  return submap_2d_;
}
inline ::cartographer::mapping::proto::LegacySubmap2D* LegacySubmap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_2d)
  
  ::cartographer::mapping::proto::LegacySubmap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
inline void LegacySubmap::set_allocated_submap_2d(::cartographer::mapping::proto::LegacySubmap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_2d)
}

// .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
inline bool LegacySubmap::has_submap_3d() const {
  return this != internal_default_instance() && submap_3d_ != NULL;
}
inline void LegacySubmap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
inline const ::cartographer::mapping::proto::LegacySubmap3D& LegacySubmap::submap_3d() const {
  const ::cartographer::mapping::proto::LegacySubmap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySubmap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacySubmap3D*>(
      &::cartographer::mapping::proto::_LegacySubmap3D_default_instance_);
}
inline ::cartographer::mapping::proto::LegacySubmap3D* LegacySubmap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::LegacySubmap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySubmap.submap_3d)
  return submap_3d_;
}
inline ::cartographer::mapping::proto::LegacySubmap3D* LegacySubmap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySubmap.submap_3d)
  
  ::cartographer::mapping::proto::LegacySubmap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
inline void LegacySubmap::set_allocated_submap_3d(::cartographer::mapping::proto::LegacySubmap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySubmap.submap_3d)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto__INCLUDED
