// Generated by gencpp from file cartographer_ros_msgs/StartTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef CARTOGRAPHER_ROS_MSGS_MESSAGE_STARTTRAJECTORYREQUEST_H
#define CARTOGRAPHER_ROS_MSGS_MESSAGE_STARTTRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace cartographer_ros_msgs
{
template <class ContainerAllocator>
struct StartTrajectoryRequest_
{
  typedef StartTrajectoryRequest_<ContainerAllocator> Type;

  StartTrajectoryRequest_()
    : configuration_directory()
    , configuration_basename()
    , use_initial_pose(false)
    , initial_pose()
    , relative_to_trajectory_id(0)  {
    }
  StartTrajectoryRequest_(const ContainerAllocator& _alloc)
    : configuration_directory(_alloc)
    , configuration_basename(_alloc)
    , use_initial_pose(false)
    , initial_pose(_alloc)
    , relative_to_trajectory_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _configuration_directory_type;
  _configuration_directory_type configuration_directory;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _configuration_basename_type;
  _configuration_basename_type configuration_basename;

   typedef uint8_t _use_initial_pose_type;
  _use_initial_pose_type use_initial_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _initial_pose_type;
  _initial_pose_type initial_pose;

   typedef int32_t _relative_to_trajectory_id_type;
  _relative_to_trajectory_id_type relative_to_trajectory_id;





  typedef boost::shared_ptr< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartTrajectoryRequest_

typedef ::cartographer_ros_msgs::StartTrajectoryRequest_<std::allocator<void> > StartTrajectoryRequest;

typedef boost::shared_ptr< ::cartographer_ros_msgs::StartTrajectoryRequest > StartTrajectoryRequestPtr;
typedef boost::shared_ptr< ::cartographer_ros_msgs::StartTrajectoryRequest const> StartTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cartographer_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cartographer_ros_msgs': ['/home/nvidia/olaf/src/cartographer_ros/cartographer_ros_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "555a1aa894dfd093eaa13b245b423df8";
  }

  static const char* value(const ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x555a1aa894dfd093ULL;
  static const uint64_t static_value2 = 0xeaa13b245b423df8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartographer_ros_msgs/StartTrajectoryRequest";
  }

  static const char* value(const ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
string configuration_directory\n\
string configuration_basename\n\
bool use_initial_pose\n\
geometry_msgs/Pose initial_pose\n\
int32 relative_to_trajectory_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.configuration_directory);
      stream.next(m.configuration_basename);
      stream.next(m.use_initial_pose);
      stream.next(m.initial_pose);
      stream.next(m.relative_to_trajectory_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartographer_ros_msgs::StartTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "configuration_directory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.configuration_directory);
    s << indent << "configuration_basename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.configuration_basename);
    s << indent << "use_initial_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_initial_pose);
    s << indent << "initial_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.initial_pose);
    s << indent << "relative_to_trajectory_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.relative_to_trajectory_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTOGRAPHER_ROS_MSGS_MESSAGE_STARTTRAJECTORYREQUEST_H
